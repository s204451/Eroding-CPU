;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit CPUTop : 
  module ProgramCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip stop : UInt<1>, flip jump : UInt<1>, flip run : UInt<1>, flip programCounterJump : UInt<16>, programCounter : UInt<16>}
    
    reg programCounterReg : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[ProgramCounter.scala 14:34]
    node _T = eq(io.run, UInt<1>("h00")) @[ProgramCounter.scala 16:19]
    node _T_1 = or(io.stop, _T) @[ProgramCounter.scala 16:16]
    when _T_1 : @[ProgramCounter.scala 16:28]
      programCounterReg <= io.programCounter @[ProgramCounter.scala 17:23]
      skip @[ProgramCounter.scala 16:28]
    else : @[ProgramCounter.scala 18:16]
      when io.jump : @[ProgramCounter.scala 19:19]
        programCounterReg <= io.programCounterJump @[ProgramCounter.scala 20:25]
        skip @[ProgramCounter.scala 19:19]
      else : @[ProgramCounter.scala 21:18]
        node _T_2 = add(io.programCounter, UInt<1>("h01")) @[ProgramCounter.scala 22:46]
        node _T_3 = tail(_T_2, 1) @[ProgramCounter.scala 22:46]
        programCounterReg <= _T_3 @[ProgramCounter.scala 22:25]
        skip @[ProgramCounter.scala 21:18]
      skip @[ProgramCounter.scala 18:16]
    io.programCounter <= programCounterReg @[ProgramCounter.scala 25:21]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, dataRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:19]
    when io.testerEnable : @[DataMemory.scala 20:25]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 22:37]
      io.testerDataRead <= _T @[DataMemory.scala 22:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 23:17]
      when io.testerWriteEnable : @[DataMemory.scala 24:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 26:25]
        skip @[DataMemory.scala 24:32]
      skip @[DataMemory.scala 20:25]
    else : @[DataMemory.scala 28:15]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 30:31]
      io.dataRead <= _T_2 @[DataMemory.scala 30:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 31:23]
      when io.writeEnable : @[DataMemory.scala 32:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 34:19]
        skip @[DataMemory.scala 32:26]
      skip @[DataMemory.scala 28:15]
    
  module ProgramMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, instructionRead : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[ProgramMemory.scala 16:20]
    when io.testerEnable : @[ProgramMemory.scala 18:24]
      read mport _T = memory[io.testerAddress], clock @[ProgramMemory.scala 20:37]
      io.testerDataRead <= _T @[ProgramMemory.scala 20:23]
      io.instructionRead <= UInt<32>("h00") @[ProgramMemory.scala 21:24]
      when io.testerWriteEnable : @[ProgramMemory.scala 22:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[ProgramMemory.scala 24:25]
        skip @[ProgramMemory.scala 22:32]
      skip @[ProgramMemory.scala 18:24]
    else : @[ProgramMemory.scala 26:16]
      read mport _T_2 = memory[io.address], clock @[ProgramMemory.scala 28:38]
      io.instructionRead <= _T_2 @[ProgramMemory.scala 28:24]
      io.testerDataRead <= UInt<32>("h00") @[ProgramMemory.scala 29:23]
      skip @[ProgramMemory.scala 26:16]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip aSel : UInt<3>, flip bSel : UInt<3>, flip writeData : UInt<32>, flip writeEnable : UInt<1>, a : UInt<32>, b : UInt<32>}
    
    reg R0Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 17:22]
    reg R1Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 18:22]
    reg R2Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 19:22]
    reg R3Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 20:22]
    reg R4Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 21:22]
    reg R5Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 22:22]
    reg R6Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 23:22]
    reg R7Reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[RegisterFile.scala 24:22]
    io.a <= UInt<1>("h00") @[RegisterFile.scala 26:8]
    io.b <= UInt<1>("h00") @[RegisterFile.scala 27:8]
    node _T = eq(UInt<1>("h00"), io.aSel) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.writeEnable : @[RegisterFile.scala 31:29]
        R0Reg <= io.writeData @[RegisterFile.scala 32:15]
        skip @[RegisterFile.scala 31:29]
      io.a <= R0Reg @[RegisterFile.scala 34:12]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.aSel) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.a <= R1Reg @[RegisterFile.scala 37:12]
        when io.writeEnable : @[RegisterFile.scala 38:29]
          R1Reg <= io.writeData @[RegisterFile.scala 39:15]
          skip @[RegisterFile.scala 38:29]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.aSel) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.a <= R2Reg @[RegisterFile.scala 43:12]
          when io.writeEnable : @[RegisterFile.scala 44:29]
            R2Reg <= io.writeData @[RegisterFile.scala 45:15]
            skip @[RegisterFile.scala 44:29]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.aSel) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.a <= R3Reg @[RegisterFile.scala 49:12]
            when io.writeEnable : @[RegisterFile.scala 50:29]
              R3Reg <= io.writeData @[RegisterFile.scala 51:15]
              skip @[RegisterFile.scala 50:29]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), io.aSel) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.a <= R4Reg @[RegisterFile.scala 55:12]
              when io.writeEnable : @[RegisterFile.scala 56:29]
                R4Reg <= io.writeData @[RegisterFile.scala 57:15]
                skip @[RegisterFile.scala 56:29]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h05"), io.aSel) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.a <= R5Reg @[RegisterFile.scala 61:12]
                when io.writeEnable : @[RegisterFile.scala 62:29]
                  R5Reg <= io.writeData @[RegisterFile.scala 63:15]
                  skip @[RegisterFile.scala 62:29]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h06"), io.aSel) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.a <= R6Reg @[RegisterFile.scala 67:12]
                  when io.writeEnable : @[RegisterFile.scala 68:29]
                    R6Reg <= io.writeData @[RegisterFile.scala 69:15]
                    skip @[RegisterFile.scala 68:29]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<3>("h07"), io.aSel) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.a <= R7Reg @[RegisterFile.scala 73:12]
                    when io.writeEnable : @[RegisterFile.scala 74:29]
                      R7Reg <= io.writeData @[RegisterFile.scala 75:15]
                      skip @[RegisterFile.scala 74:29]
                    skip @[Conditional.scala 39:67]
    node _T_8 = eq(UInt<1>("h00"), io.bSel) @[Conditional.scala 37:30]
    when _T_8 : @[Conditional.scala 40:58]
      io.b <= R0Reg @[RegisterFile.scala 82:12]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_9 = eq(UInt<1>("h01"), io.bSel) @[Conditional.scala 37:30]
      when _T_9 : @[Conditional.scala 39:67]
        io.b <= R1Reg @[RegisterFile.scala 85:12]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_10 = eq(UInt<2>("h02"), io.bSel) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 39:67]
          io.b <= R2Reg @[RegisterFile.scala 88:12]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<2>("h03"), io.bSel) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            io.b <= R3Reg @[RegisterFile.scala 91:12]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h04"), io.bSel) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              io.b <= R4Reg @[RegisterFile.scala 94:12]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<3>("h05"), io.bSel) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.b <= R5Reg @[RegisterFile.scala 97:12]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_14 = eq(UInt<3>("h06"), io.bSel) @[Conditional.scala 37:30]
                when _T_14 : @[Conditional.scala 39:67]
                  io.b <= R6Reg @[RegisterFile.scala 100:12]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_15 = eq(UInt<3>("h07"), io.bSel) @[Conditional.scala 37:30]
                  when _T_15 : @[Conditional.scala 39:67]
                    io.b <= R7Reg @[RegisterFile.scala 103:12]
                    skip @[Conditional.scala 39:67]
    
  module ControlUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<4>, aluOp : UInt<3>, memWrite : UInt<1>, writeEnable : UInt<1>, loadMemory : UInt<1>, jumpConditional : UInt<1>, jump : UInt<1>, loadImmediate : UInt<1>, done : UInt<1>}
    
    io.aluOp <= UInt<1>("h00") @[ControlUnit.scala 18:12]
    io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 19:15]
    io.writeEnable <= UInt<1>("h00") @[ControlUnit.scala 20:18]
    io.loadMemory <= UInt<1>("h00") @[ControlUnit.scala 21:17]
    io.jump <= UInt<1>("h00") @[ControlUnit.scala 22:11]
    io.jumpConditional <= UInt<1>("h00") @[ControlUnit.scala 23:22]
    io.loadImmediate <= UInt<1>("h00") @[ControlUnit.scala 24:20]
    io.done <= UInt<1>("h00") @[ControlUnit.scala 25:11]
    node _T = eq(UInt<1>("h00"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.done <= UInt<1>("h01") @[ControlUnit.scala 30:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.aluOp <= UInt<1>("h01") @[ControlUnit.scala 33:16]
        io.writeEnable <= UInt<1>("h01") @[ControlUnit.scala 34:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.aluOp <= UInt<2>("h02") @[ControlUnit.scala 37:16]
          io.writeEnable <= UInt<1>("h01") @[ControlUnit.scala 38:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.aluOp <= UInt<2>("h03") @[ControlUnit.scala 41:16]
            io.writeEnable <= UInt<1>("h01") @[ControlUnit.scala 42:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.loadImmediate <= UInt<1>("h01") @[ControlUnit.scala 45:24]
              io.writeEnable <= UInt<1>("h01") @[ControlUnit.scala 46:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.loadMemory <= UInt<1>("h01") @[ControlUnit.scala 49:21]
                io.writeEnable <= UInt<1>("h01") @[ControlUnit.scala 50:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.memWrite <= UInt<1>("h01") @[ControlUnit.scala 53:19]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<3>("h07"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.jump <= UInt<1>("h01") @[ControlUnit.scala 56:15]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<4>("h08"), io.opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.aluOp <= UInt<3>("h05") @[ControlUnit.scala 59:16]
                      io.jumpConditional <= UInt<1>("h01") @[ControlUnit.scala 60:26]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_9 = eq(UInt<4>("h09"), io.opcode) @[Conditional.scala 37:30]
                      when _T_9 : @[Conditional.scala 39:67]
                        io.aluOp <= UInt<3>("h04") @[ControlUnit.scala 63:16]
                        io.jumpConditional <= UInt<1>("h01") @[ControlUnit.scala 64:26]
                        skip @[Conditional.scala 39:67]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip operand1 : UInt<32>, flip operand2 : UInt<32>, flip sel : UInt<3>, result : UInt<32>, compResult : UInt<1>}
    
    io.compResult <= UInt<1>("h00") @[ALU.scala 13:17]
    io.result <= io.operand2 @[ALU.scala 14:13]
    node _T = eq(io.sel, UInt<1>("h01")) @[ALU.scala 17:16]
    when _T : @[ALU.scala 17:25]
      node _T_1 = add(io.operand1, io.operand2) @[ALU.scala 18:30]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 18:30]
      io.result <= _T_2 @[ALU.scala 18:15]
      skip @[ALU.scala 17:25]
    else : @[ALU.scala 19:32]
      node _T_3 = eq(io.sel, UInt<2>("h02")) @[ALU.scala 19:23]
      when _T_3 : @[ALU.scala 19:32]
        node _T_4 = sub(io.operand1, io.operand2) @[ALU.scala 20:30]
        node _T_5 = tail(_T_4, 1) @[ALU.scala 20:30]
        io.result <= _T_5 @[ALU.scala 20:15]
        skip @[ALU.scala 19:32]
      else : @[ALU.scala 21:32]
        node _T_6 = eq(io.sel, UInt<2>("h03")) @[ALU.scala 21:23]
        when _T_6 : @[ALU.scala 21:32]
          node _T_7 = mul(io.operand1, io.operand2) @[ALU.scala 22:30]
          io.result <= _T_7 @[ALU.scala 22:15]
          skip @[ALU.scala 21:32]
        else : @[ALU.scala 23:31]
          node _T_8 = eq(io.sel, UInt<3>("h04")) @[ALU.scala 23:22]
          when _T_8 : @[ALU.scala 23:31]
            node _T_9 = sub(io.operand1, io.operand2) @[ALU.scala 24:34]
            node _T_10 = tail(_T_9, 1) @[ALU.scala 24:34]
            node _T_11 = eq(_T_10, UInt<1>("h00")) @[ALU.scala 24:48]
            io.compResult <= _T_11 @[ALU.scala 24:19]
            skip @[ALU.scala 23:31]
          else : @[ALU.scala 25:30]
            node _T_12 = eq(io.sel, UInt<3>("h05")) @[ALU.scala 25:22]
            when _T_12 : @[ALU.scala 25:30]
              node _T_13 = gt(io.operand1, io.operand2) @[ALU.scala 26:35]
              io.compResult <= _T_13 @[ALU.scala 26:19]
              skip @[ALU.scala 25:30]
    
  module CPUTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip run : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>, flip testerProgMemEnable : UInt<1>, flip testerProgMemAddress : UInt<16>, testerProgMemDataRead : UInt<32>, flip testerProgMemWriteEnable : UInt<1>, flip testerProgMemDataWrite : UInt<32>}
    
    inst programCounter of ProgramCounter @[CPUTop.scala 23:30]
    programCounter.clock <= clock
    programCounter.reset <= reset
    inst dataMemory of DataMemory @[CPUTop.scala 24:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst programMemory of ProgramMemory @[CPUTop.scala 25:29]
    programMemory.clock <= clock
    programMemory.reset <= reset
    inst registerFile of RegisterFile @[CPUTop.scala 26:28]
    registerFile.clock <= clock
    registerFile.reset <= reset
    inst controlUnit of ControlUnit @[CPUTop.scala 27:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    inst alu of ALU @[CPUTop.scala 28:19]
    alu.clock <= clock
    alu.reset <= reset
    programCounter.io.run <= io.run @[CPUTop.scala 31:25]
    programMemory.io.address <= programCounter.io.programCounter @[CPUTop.scala 32:28]
    programCounter.io.stop <= UInt<1>("h00") @[CPUTop.scala 33:26]
    io.done <= UInt<1>("h00") @[CPUTop.scala 34:11]
    programMemory.io.address <= programCounter.io.programCounter @[CPUTop.scala 40:28]
    node _T = bits(programMemory.io.instructionRead, 31, 28) @[CPUTop.scala 41:60]
    controlUnit.io.opcode <= _T @[CPUTop.scala 41:25]
    node _T_1 = bits(programMemory.io.instructionRead, 27, 25) @[CPUTop.scala 42:59]
    registerFile.io.aSel <= _T_1 @[CPUTop.scala 42:24]
    node _T_2 = bits(programMemory.io.instructionRead, 24, 22) @[CPUTop.scala 43:59]
    registerFile.io.bSel <= _T_2 @[CPUTop.scala 43:24]
    node _T_3 = bits(programMemory.io.instructionRead, 24, 0) @[CPUTop.scala 46:70]
    node immediateValue = cat(UInt<7>("h00"), _T_3) @[Cat.scala 29:58]
    node muxOp2 = mux(controlUnit.io.loadImmediate, immediateValue, registerFile.io.b) @[CPUTop.scala 47:19]
    alu.io.operand1 <= registerFile.io.a @[CPUTop.scala 48:19]
    alu.io.operand2 <= muxOp2 @[CPUTop.scala 49:19]
    alu.io.sel <= controlUnit.io.aluOp @[CPUTop.scala 50:14]
    node _T_4 = bits(registerFile.io.b, 15, 0) @[CPUTop.scala 53:45]
    dataMemory.io.address <= _T_4 @[CPUTop.scala 53:25]
    dataMemory.io.dataWrite <= registerFile.io.a @[CPUTop.scala 54:27]
    dataMemory.io.writeEnable <= controlUnit.io.memWrite @[CPUTop.scala 55:29]
    node writeData = mux(controlUnit.io.loadMemory, dataMemory.io.dataRead, alu.io.result) @[CPUTop.scala 58:22]
    registerFile.io.writeData <= writeData @[CPUTop.scala 59:29]
    registerFile.io.writeEnable <= controlUnit.io.writeEnable @[CPUTop.scala 60:31]
    node conditionalJumping = and(controlUnit.io.jumpConditional, alu.io.compResult) @[CPUTop.scala 63:59]
    node _T_5 = or(controlUnit.io.jump, conditionalJumping) @[CPUTop.scala 64:49]
    programCounter.io.jump <= _T_5 @[CPUTop.scala 64:26]
    node _T_6 = bits(programMemory.io.instructionRead, 15, 0) @[CPUTop.scala 65:75]
    programCounter.io.programCounterJump <= _T_6 @[CPUTop.scala 65:40]
    io.done <= controlUnit.io.done @[CPUTop.scala 67:11]
    programCounter.io.stop <= io.done @[CPUTop.scala 68:26]
    programMemory.io.testerAddress <= io.testerProgMemAddress @[CPUTop.scala 74:34]
    io.testerProgMemDataRead <= programMemory.io.testerDataRead @[CPUTop.scala 75:28]
    programMemory.io.testerDataWrite <= io.testerProgMemDataWrite @[CPUTop.scala 76:36]
    programMemory.io.testerEnable <= io.testerProgMemEnable @[CPUTop.scala 77:33]
    programMemory.io.testerWriteEnable <= io.testerProgMemWriteEnable @[CPUTop.scala 78:38]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[CPUTop.scala 80:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[CPUTop.scala 81:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[CPUTop.scala 82:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[CPUTop.scala 83:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[CPUTop.scala 84:35]
    
