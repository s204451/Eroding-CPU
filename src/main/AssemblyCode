0. LI R6 19                         // R6 = 19
1. LI R7 0                          // R7 = 0
2. LI R1 0                          // X = 0
3. JGT R1 R6 46                     // If X > 19 loop ended jump to end
    4. LI R2 0                      // Y = 0
    5. JGT R2 R6 43                 // If Y > 19 loop ended jump to end of loop
        6. LI R0 20                 // R0 = 20
        7. MULT R0 R2               // R0 = 20*y
        8. ADD R0 R1                // R0 = x+20*y = in_image address
        9. LI R3 0
        10. ADD R3 R0               // R3 = 0 + R0 = in_image address
        11. LI R5 400
        12. ADD R3 R5               // R3 = x+20*y+400 = out_image address
        13. LD R4 R0                // R4 = memory(R0 (in_image) )
        14. JEQ R1 R7 20            // If X == 0
        15. JEQ R2 R7 20            // If Y == 0
        16. JEQ R1 R6 20            // If X == 19
        17. JEQ R2 R6 20            // If Y == 19
        18. JEQ R4 R7 20            // If in_image(x,y) = 0
        19. JR 22                   // Skip the next 2 lines if none of the above are true
            20. SD R7 R3            // Save 0 to memory(R3) = memory(out_image)
            21. JR 40               // continue
        22. LI R5 1
        23. SUB R0 R5               // in_image(x-1,y)
        24. LD R4 R0                // Stores the value of memory(R0) in R4
        25. JEQ R4 R7 20            // if (in_image(x-1,y) == 0)

        26. LI R5 2
        27. ADD R0 R5               // in_image(x+1,y)
        28. LD R4 R0                // Stores the value of memory(R0) in R4
        29. JEQ R4 R7 20            // if (in_image(x+1,y) == 0)

        30. LI R5 21
        31. SUB R0 R5               // in_image(x,y-1)
        32. LD R4 R0                // Stores the value of memory(R0) in R4
        33. JEQ R4 R7 20            // if (in_image(x,y-1) == 0)
        
        34. LI R5 40
        35. ADD R0 R5               // in_image(x,y+1)
        36. LD R4 R0                // Stores the value of memory(R0) in R4
        37. JEQ R4 R7 20            // if (in_image(x,y+1) == 0)

        38. LI R5 255
        39. SD R5 R3                // Save 255 to memory(R3) = memory(out_image)

    40. LI R5 1
    41. ADD R2 R5                   // Y = Y + 1
    42. JR 5                        // Jumps back to beginning of loop 2
43. LI R5 1
44. ADD R1 R5                       // X = X + 1
45. JR 3                            // Jumps back to beginning of loop 1
46. END                             // Finished loops

*********** LIST OF INSTRUCTIONS **********
// Arithmetic
1 Addition                    ADD R0 R1
2 Subtraction                 SUB R0 R1
3 Multiplication              MULT R0 R1

// Data type
4 Load immediate              LI R1 Int
5 Load data                   LD R1 R2
6 Store data                  SD R1 R2

// Jump type
7 Jump                        JR Int

// Jump Comparison Type
8 Jump if greater than        JGT R1 R2 Int
9 Jump if equal               JEQ R1 R2 Int

0 End program                 END
*******************************************

How is the 32-bit instruction divided:
Instruction type: Opcode(4) Instructions(28)
Depending on the opcode the instruction fields are divided as follows
    R(Register):          R(3)          R(3)        Nothing(22)
    I(Immediate):         R(3)          Immediate(25)
    J(Jump):              Nothing(3)    Nothing(3)  Target(22)
    JC(Jump Conditional): R(3)          R(3)       Target(22)
    S(Store):             R(3)          R(3)        Nothing(22)
